generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum UserRole {
  ADMIN 
  USER
}

enum DimensionUnit {
  cm
  m
  in
}

enum WeightUnit {
  kg
  gm
  lb
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role UserRole @default(USER)
  isTwoFactorEnabled    Boolean                @default(false)
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  accounts              Account[]
  products              Product[]
  twoFactorConfirmation TwoFactorConfirmation?
}

model Account {
  id                       String   @id @default(cuid())
  userId                   String   @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
  user                     User?    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model VerificationToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expiresAt DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expiresAt DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expiresAt DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model Product {
  id        String   @id @default(cuid())
  name      String   @db.Text
  description String? @db.Text
  imageUrls ProductImageUrl[]
  categoryId String? 
  category Category? @relation(fields: [categoryId], references: [id])
  variant ProductVariant[]
  attributes      ProductAttribute[]
  userId String
  isPublished Boolean @default(false)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
  @@index([userId])
}

model ProductAttribute {Ä«
    id          String    @id @default(cuid())
    label       String    // e.g., "Color", "Size"
    values      String[]  // e.g., ["Red", "Blue"], ["S", "M", "L"]
    product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
    productId   String
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt

    @@index([productId])
}

model ProductImageUrl {
  id        String   @id @default(cuid())
  url       String
  key       String   //Store file key
  productId String  
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  position  Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([productId])
}

model Category{
  id        String   @id @default(cuid())
  name      String
  products Product[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductVariant{
  id        String   @id @default(cuid())
  title     String
  productId String
  product   Product @relation(fields: [productId], references: [id])
  sku String? @unique
  price Float?
  stockQuantity Int? @default(0)
  minStockQuantity  Int? @default(3)
  isPublished Boolean @default(false)
  attributes Json?
  packageDimensions PackageDimensions?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

model PackageDimensions {
  id            String         @id @default(cuid())
  length        Float
  width         Float
  height        Float
  weight        Float
  unit          DimensionUnit  @default(cm)
  weightUnit    WeightUnit     @default(kg)
  variant       ProductVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)
  variantId     String        @unique
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}